# -*- coding: utf-8 -*-
"""Ai_chatbot.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DccEuOTFLYJ4humU41ea9KDz6cQI2DoC

Ai_chatbot
"""

import json

# Example dataset
data = {
    "intents": [
        {
            "tag": "greeting",
            "patterns": ["Hi", "Hello", "Hey", "How are you?"],
            "responses": ["Hello! How can I help you today?", "Hi there! What can I do for you?"]
        },
        {
            "tag": "goodbye",
            "patterns": ["Bye", "See you later", "Good night"],
            "responses": ["Goodbye! Have a nice day.", "See you later!"]
        },
        {
            "tag": "thanks",
            "patterns": ["Thanks", "Thank you", "That's helpful"],
            "responses": ["You're welcome!", "Happy to help!"]
        },
        {
            "tag": "netflix",
            "patterns": ["Suggest a movie", "Give me a TV show", "What should I watch?"],
            "responses": ["You can watch 'Stranger Things'!", "How about 'Money Heist'?"]
        }
    ]
}

# Save as intents.json in Colab
with open("intents.json", "w") as f:
    json.dump(data, f, indent=4)

print("âœ… intents.json file created successfully")

import json
import random
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load dataset
with open("intents.json") as f:
    data = json.load(f)

patterns = []
responses = []

for intent in data['intents']:
    for pattern in intent['patterns']:
        patterns.append(pattern)
        responses.append(intent['responses'])

# TF-IDF Vectorizer
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(patterns)

# Chatb Function
def chatbot_response(user_input):
    user_vec = vectorizer.transform([user_input])
    similarity = cosine_similarity(user_vec, X)
    idx = similarity.argmax()

    if similarity[0, idx] < 0.3:  # confidence threshold
        return "ðŸ¤– I'm not sure I understand. Can you rephrase?"
    else:
        return random.choice(responses[idx])

# Test
print("âœ… Chatbot is ready! Type something...")

# Example
user_messages = ["Hello", "Suggest a movie", "Bye"]
for msg in user_messages:
    print(f"You: {msg}")
    print("Bot:", chatbot_response(msg))

"""***Gradio Interface***"""

!pip install gradio

import json
import random
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import gradio as gr

# Load intents.json
with open("intents.json") as f:
    data = json.load(f)

patterns = []
responses = []

for intent in data['intents']:
    for pattern in intent['patterns']:
        patterns.append(pattern)
        responses.append(intent['responses'])

# TF-IDF Vectorizer
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(patterns)

# Chatbot Function
def chatbot_response(user_input):
    user_vec = vectorizer.transform([user_input])
    similarity = cosine_similarity(user_vec, X)
    idx = similarity.argmax()

    if similarity[0, idx] < 0.3:  # confidence threshold
        return "ðŸ¤– I'm not sure I understand. Can you rephrase?"
    else:
        return random.choice(responses[idx])

# Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("## ðŸ¤– AI Chatbot")
    with gr.Row():
        user_input = gr.Textbox(label="Type your message here")
        output = gr.Textbox(label="Bot Reply")
    submit = gr.Button("Send")
    submit.click(fn=chatbot_response, inputs=user_input, outputs=output)

demo.launch()